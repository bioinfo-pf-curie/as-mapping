#!/usr/bin/env python
# -*- coding: utf8 -*-

## Copyright (c) 2016 Institut Curie
## This software is distributed without any guarantee.
## See the LICENCE file for details
                             
## Author(s): Kenzo-Hugo Hillion & Laur√®ne Syx
## Contact(s): kenzo.hillion@curie.fr & laurene.syx@curie.fr
## Python version: 2.7.9
## Script description: Create an allele-specific count table per SNP

scriptVersion = '10-23-2017'

"""
This script is used to create an allele-specific count table 

    INPUTS :  
        - Output file from check_variants.py (clinTools) intersected with a BED6 file 
        - SNP file
        - Parent1 and Parent2 names
        
    OUTPUT :
        - Allele-specific count table
    
    USE :
        ./alleleCount.py [opts: --r1 clinToolsFile1 -v vcfFile -1 parent1 -2 parent2]
"""

###########  Import  ###########

import os
import argparse
import subprocess
import time
import sys
import re

###########  Function  ###########

def testNone(argument):
    """
    Test if argument is None or not
    Input(s):
        argument: [int, string, ...] - argument given by the user
    Output:
        [int, string, "", ...]
    """

    if not argument is None:
        variable = argument
    else:
        variable = ""
    return variable

def alleleCount(r1):
    with open(r1, "r") as clinFile:
        snpCount = dict()
        for clinLine in clinFile: 
            baseInfo = clinLine.rstrip().split("\t")
            curChrm = baseInfo[0]
            curStart = baseInfo[1]
            curEnd = baseInfo[2]              
            snpID = str(curChrm) + "_" + str(curStart)
            countA = baseInfo[3]
            countT = baseInfo[4]
            countC = baseInfo[5]
            countG = baseInfo[6]
            snpCount[snpID] = {"Chr":curChrm,"Start":curStart ,"End":curEnd ,"A":countA, "T":countT, "C":countC, "G":countG}
        return snpCount                
            
def getGenotypes(vcf):
    with open(vcf, "r") as vcfFile:
        vcfDict = dict()
        for vcfLine in vcfFile:
            if vcfLine.startswith('#'):
                pass
            else:
                snpInfo = vcfLine.rstrip().split('\t')
                snpChr = str(snpInfo[0])
                snpStart = int(snpInfo[1])-1
                snpEnd = snpInfo[1]
                snpGeno1 = snpInfo[2]
                snpGeno2 = snpInfo[3]
                snpID = str(snpChr) + "_" + str(snpStart)
                vcfDict[snpID] = {"geno1":snpGeno1, "geno2":snpGeno2}
        return vcfDict

## Main
if __name__ == "__main__":

    ## Arguments
    parser = argparse.ArgumentParser(prog = "alleleCount.py", description = 'This script is used to create an allele-specific count table',\
                                     epilog = 'Version '+ scriptVersion)

    parser.add_argument("-f", "--r1", type=str, help="R1_file generated by check_variants.py") 
    parser.add_argument("-v", "--vcf", type=str, action="store", help="VCF file")
    parser.add_argument("-1", "--geno1", type=str, action="store",help="Geno 1")
    parser.add_argument("-2", "--geno2", type=str, action="store",help="Geno 2")
    parser.add_argument("-n", "--name", type = str, \
                        help = "prefix name for the output file (default : SNPCountTable")
    parser.add_argument("-o", "--output_dir", type = str, \
                        help = "output directory (default : current directory)")

    args = parser.parse_args()

    ## Store arguments
    r1 = args.r1
    vcf = args.vcf
    geno1 = args.geno1
    geno2 = args.geno2

    if (args.name):
        outname = args.name
    else:
        outname = "SNPCountTable"

    if (args.output_dir):
        output_dir = args.output_dir
    else:
        output_dir = "./"
   
    ##########################################################

    ## Allele-specific count (per SNP)
    countTable = open(str(output_dir) + str(outname) + ".data", "w")
    countTable.write("\t".join(map(str,["chromosome", "start", "end", "total", str(geno1)+"_base", str(geno1)+"_count", str(geno2)+"_base", str(geno2)+"_count", "otherCount", "otherBase"]))+"\n")

    snpCount = alleleCount(r1)
    vcfDict = getGenotypes(vcf)

    for snpID, value in zip(snpCount.keys(), snpCount.values()):
        if snpID in vcfDict:
            snpGeno1 = vcfDict[snpID]["geno1"]
            snpGeno2 = vcfDict[snpID]["geno2"]
            total = int(value["A"])+int(value["T"])+int(value["C"])+int(value["G"])
            parentCoverage = int(value[snpGeno1])+int(value[snpGeno2])
            other = int(total)-int(parentCoverage)
            otherBase =  list(set(["A","T","C","G"])-set([snpGeno1,snpGeno2]))  
            otherCount = ",".join(map(str,[otherBase[0]+":"+str(value[otherBase[0]]), otherBase[1]+":"+str(value[otherBase[1]])]))
            countTable.write("\t".join([str(value["Chr"]), str(value["Start"]),str(value["End"]), str(parentCoverage), str(snpGeno1), str(value[snpGeno1]), str(snpGeno2), str(value[snpGeno2]), str(other), str(otherCount)])+"\n")
    countTable.close()
