#!/usr/bin/env python
# Author(s) : Kenzo Hillion
# Contact : kenzo.hillion@curie.fr
# Comment(s) :

"""
Little description of the script

Exemple of usage
"""

#### Packages #### 

import sys
import getopt
import os
import re
import pysam
import itertools

#### Functions ####

def usage():
 	print "compGen.py : To compare SAM file generated by ART VS mapped SAM."
	print " -> Also write an output bam with a flag"
	print "  -XM=1 : mapped desired region"
	print "  -XM=2 : mapped to incorrect region or unmapped"
 	print " -------------------------------------------------------------- "
	"""Usage function"""
 	print "Usage : compGen.py"
	print "[-g/--genbam] <sorted BAM file generated by simulation reads tool>"
	print "[-m/--mapbam] <sorted BAM file of mapped reads>"
	print "[-1/--strain1] <name of strain 1>"
	print "[-2/--strain2] <name of strain 2>"
	print "[-o/--output_dir] <Output directory>"
 	print "[-h/--help] <Help>"
	return

def get_args():
	"""Get argument"""
	try:
		opts, args = getopt.getopt(
 		sys.argv[1:],
 		"h:g:m:o:1:2:",
 		["help","genbam","mapbam","output_dir","strain1","strain2"])
	except getopt.GetoptError:
		usage()
		sys.exit(-1)
	return opts



#### Main ####

opts=get_args()

if len(opts) == 0:
	usage()
	sys.exit()
	
for opt, arg in opts:
	if opt in ("-h", "--help"):
		usage()
		sys.exit()
	elif opt in ("-g", "--genbam"):
		genbam = arg
	elif opt in ("-m", "--mapbam"):
		mapbam = arg
	elif opt in ("-o", "--output_dir"):
		output_dir = arg
	elif opt in ("-1", "--strain1"):
		strain1 = arg
	elif opt in ("-2", "--strain2"):
		strain2 = arg
	else:
		assert False, "unhandled option"


# Read SAM/BAM files
filegenbam = pysam.Samfile(genbam, "rb")
filemapbam = pysam.Samfile(mapbam, "rb")

# Output BAM file
output = output_dir + "mapping_status.bam"
outfile = pysam.AlignmentFile(output, "wb", template=filemapbam)

# Counting correctly mapped reads
tag="XM"
counter_read=0
dict_counter={}
for x,y in itertools.izip(filemapbam.fetch(until_eof=True),filegenbam.fetch(until_eof=True)):
	counter_read += 1				# Increments read counter
	tmp_split=x.qname.split("-", 1 )		
	pos=int(tmp_split[0].split(":", 1 )[1])+100	# Get the position of the SNP
	if not(dict_counter.has_key(pos)):
		dict_counter[pos]={}			# Create dictionnary	
		dict_counter[pos][strain1]=0
		dict_counter[pos][strain2]=0
		dict_counter[pos]["total"]=0
	dict_counter[pos]["total"] += 1
	if (x.pos==y.pos):				# Read mapped correctly
		tmp_split=x.qname.split("_", 1 )
		strain=tmp_split[1].split("-",1)[0]	
		dict_counter[pos][strain] += 1
		x.set_tag(tag,1)
	else:
		x.set_tag(tag,2)
	outfile.write(x)
	if (counter_read % 1000000 == 0):
		print ("Reads treated : " + str(counter_read))
		
print ("Total number of reads : " + str(counter_read))

print ("Writing output files in " + str(output_dir))
COUNTS = open(str(output_dir) + "allele_counts.txt", "w")
COUNTS.write("SNP\t" + strain1 + "\t" + strain2 + "\tTotal_reads\n")
for read in dict_counter.keys():
	COUNTS.write(str(read) + "\t" + str(dict_counter[read][strain1]) + "\t" + str(dict_counter[read][strain2]) + "\t" + str(dict_counter[read]["total"]) + "\n")


COUNTS.close()



# Closing SAM/BAM files
filegenbam.close()
filemapbam.close()
outfile.close()
